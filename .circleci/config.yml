version: 2.1

orbs:
    aws-cli: circleci/aws-cli@1.0.0
    slack: circleci/slack@3.4.2
    jira: circleci/jira@1.1.7

aliases:
    - &restore_cache
        restore_cache:
            key: dependencies-{{ checksum "package-lock.json" }}-1
    - &save_cache
        save_cache:
            key: dependencies-{{ checksum "package-lock.json" }}-1
            paths:
                - ~/mattermost/mattermost-webapp/node_modules

jobs:

##########################################
########### DEVELOPMENT ##################
##########################################

    # Build - DEV
    build-dev:
        working_directory: ~/mattermost/mattermost-webapp
        docker:
            - image: circleci/node:latest
        resource_class: 2xlarge
        steps:
            - checkout

            - add_ssh_keys:
                fingerprints:
                    - "14:6d:d4:16:a5:07:e6:08:a9:14:b9:72:bb:36:7d:92" 
            
            - *restore_cache
            - run:
                name: Build
                command: |
                    make package
            - *save_cache
            
            - store_artifacts:
                path: ~/mattermost/mattermost-webapp/mattermost-webapp.tar.gz
            
            - slack/notify:
                color: '#42e2f4'
                author_name: $CIRCLE_USERNAME
                message: 'There was a commit on branch: $CIRCLE_BRANCH'
                title: '[DEVELOPMENT] Job/Deploy Succesfully completed'

            - slack/notify-on-failure:
                only_for_branches: 'coleridge-v5.25.3'

# ##########################################
# ############### STAGING ##################
# ##########################################

#     # Deploying STG with VPN
#     deploy-stg:
#         machine: true
#         steps:
#             - checkout

#             - add_ssh_keys:
#                 fingerprints:
#                     - "f8:36:95:9f:01:7f:49:2d:22:a0:92:00:64:cf:a4:8f"    

#             - run:
#                 command: |
#                     sudo apt-get update && sudo apt-get install -y openvpn
#                 name: Install OpenVPN

#             - run:
#                 name: Install Dependencies
#                 command: |
#                     pip install ansible
            
#             - run:
#                 command: |
#                     # Retrieving env vars for VPN - LOGIN
#                     echo -e "$login" > vpn.login
#                     sed -i 's/\\//g' vpn.login

#                     # Retrieving env vars for VPN - SOPHOS
#                     echo -e "$sophos" > sophos.ovpn
#                     sed -i 's/\\//g' sophos.ovpn
                
#                     # Connect to VPN
#                     sudo openvpn --config sophos.ovpn --auth-user-pass vpn.login > openvpn.log 2>&1 &
#                     sleep 20
#                     echo $(cat openvpn.log)

#                     # Deploy HUB
#                     ansible-playbook -i ansible/hosts ansible/deploy-stg.yaml --user=ubuntu
#                 name: Connect to VPN and Deploy

#             - slack/notify:
#                 color: '#42e2f4'
#                 author_name: $CIRCLE_USERNAME
#                 message: 'There was a commit on branch: $CIRCLE_BRANCH'
#                 title: '[STAGING] Job/Deploy Succesfully completed'

#             - slack/notify-on-failure:
#                 only_for_branches: 'staging'
 
# ##########################################
# ############ PRODUCTION ##################
# ##########################################

#     # Deploying PROD with VPN          
#     deploy-prod:
#         machine: true
#         steps:
#             - checkout

#             - add_ssh_keys:
#                 fingerprints:
#                     - "f8:36:95:9f:01:7f:49:2d:22:a0:92:00:64:cf:a4:8f"    

#             - run:
#                 command: |
#                     sudo apt-get update && sudo apt-get install -y openvpn
#                 name: Install OpenVPN

#             - run:
#                 name: Install Dependencies
#                 command: |
#                     pip install ansible
            
#             - run:
#                 command: |
#                     # Retrieving env vars for VPN - LOGIN
#                     echo -e "$login" > vpn.login
#                     sed -i 's/\\//g' vpn.login

#                     # Retrieving env vars for VPN - SOPHOS
#                     echo -e "$sophos" > sophos.ovpn
#                     sed -i 's/\\//g' sophos.ovpn
                
#                     # Connect to VPN
#                     sudo openvpn --config sophos.ovpn --auth-user-pass vpn.login > openvpn.log 2>&1 &
#                     sleep 20
#                     echo $(cat openvpn.log)

#                     # Deploy HUB
#                     ansible-playbook -i ansible/hosts ansible/deploy-prod.yaml --user=ubuntu
#                 name: Connect to VPN and Deploy
            
#             - slack/notify:
#                 color: '#42e2f4'
#                 mentions: 'channel'
#                 author_name: $CIRCLE_USERNAME
#                 message: 'There was a commit on branch: $CIRCLE_BRANCH'
#                 title: '[PRODUCTION] Job/Deploy Succesfully completed'

#             - slack/notify-on-failure:
#                 only_for_branches: 'master'

# Orchestrate or schedule a set of jobs
workflows:
    version: 2.1
    workflow-mattermost:
        jobs:        

########### DEVELOPMENT ##################

            - build-dev:
                context: DEV
                filters:
                    branches:
                        only:
                            - coleridge-v5.25.3
                post-steps:
                    - jira/notify

# ########### STAGING ##################

#             - deploy-stg:
#                 context: STG
#                 filters:
#                     branches:
#                         only:
#                             - staging
#                 post-steps:
#                     - jira/notify
                            
# ########### PRODUCTION ##################

#             - slack/approval-notification:
#                 color: '#ffa500'
#                 message: '[PRODUCTION] A workflow from branch $CIRCLE_BRANCH needs approval to continue'
#                 mentions: 'gabriel.freire,leonnardo.campos,filipe.oliveira,rafael.alves,paulo.curado,murilo.carraro,fausto.junqueira,joao.ferreira'
#                 filters:
#                     branches:
#                         only:
#                             - master
#                 post-steps:
#                     - jira/notify

#             - waiting-approval:
#                 type: approval
#                 filters:
#                     branches:
#                         only:
#                             - master
#                 post-steps:
#                     - jira/notify
                            
#             - deploy-prod:
#                 context: PROD
#                 requires:
#                     - waiting-approval
#                 filters:
#                     branches:
#                         only:
#                             - master
#                 post-steps:
#                     - jira/notify